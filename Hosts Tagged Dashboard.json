{"version":11,"variables":[{"key":"Tag","type":"csv","input":"Severity:2,Severity:1,For Decom","multiple":false}],"tiles":{"0":{"type":"code","title":"","input":"  // optional import of sdk modules\nimport { monitoredEntitiesClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nimport { units } from \"@dynatrace-sdk/units\"\n\nexport default async function () {\n  const entitiesList: any[] = [];\n  var jsonText = [];\n  \nfunction importEntities() {\nlet entities = monitoredEntitiesClient.getEntities({\n  entitySelector: 'type(\"HOST\"),tag(\"' + $Tag + '\")',\n  from: $dt_timeframe_from,\n  to: $dt_timeframe_to, \n  fields: \"+managementZones,+properties\"\n});\n  return entities;\n}\n\nfunction importEntitiesNextPage(_nextPageKey) {\nlet entities = monitoredEntitiesClient.getEntities({\n  nextPageKey: _nextPageKey\n});\n  return entities;\n}\n\n  let host;\n  let mwnames = [];\n  let monitoringmode;\n  let ostype;\n  let running_state;\n  let installerversion;\n\n  let entitiesResponse = await importEntities();\n  entitiesList.push(...entitiesResponse.entities.map(i => i));\n  while (entitiesResponse.nextPageKey){\n  entitiesResponse = await importEntitiesNextPage(entitiesResponse.nextPageKey);\n  entitiesList.push(...entitiesResponse.entities.map(i => i));\n    }\n //return entitiesResponse;\n  for (var key in entitiesList){\n    let zones = [];\n    \n    host = entitiesList[key]['displayName'];\n    monitoringmode = entitiesList[key]['properties']['monitoringMode'];\n    ostype = entitiesList[key]['properties']['osVersion'];\n    running_state = entitiesList[key]['properties']['state'];\n    installerversion = entitiesList[key]['properties']['installerVersion'];\n    for (var zone in entitiesList[key]['managementZones']){\n    zones.push(entitiesList[key]['managementZones'][zone]['name']);\n      }\n\n    \n    var myObj = {\n      mwname: mwnames[key],\n      name: host,\n      mode: monitoringmode,\n      os: ostype,\n      state: running_state,\n      version: installerversion,\n      managementZones: zones.join(', '),\n    }\n    jsonText.push(myObj);\n  }\n\nreturn jsonText;\n}","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"columnWidths":{},"lineWrapIds":[["managementZones"]],"enableLineWrap":true}}},"1":{"type":"code","title":"json file","input":"  // optional import of sdk modules\nimport { monitoredEntitiesClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nimport { units } from \"@dynatrace-sdk/units\"\n\nexport default async function () {\n  const entitiesList: any[] = [];\n  var jsonText = [];\n  \nfunction importEntities() {\nlet entities = monitoredEntitiesClient.getEntities({\n  entitySelector: 'type(\"HOST\"),tag(\"' + $Tag + '\")',\n  from: $dt_timeframe_from,\n  to: $dt_timeframe_to, \n  fields: \"+managementZones,+properties\"\n});\n  return entities;\n}\n\nfunction importEntitiesNextPage(_nextPageKey) {\nlet entities = monitoredEntitiesClient.getEntities({\n  nextPageKey: _nextPageKey\n});\n  return entities;\n}\n\n  let host;\n  let mwnames = [];\n  let monitoringmode;\n  let ostype;\n  let running_state;\n  let installerversion;\n\n  let entitiesResponse = await importEntities();\n  entitiesList.push(...entitiesResponse.entities.map(i => i));\n  while (entitiesResponse.nextPageKey){\n  entitiesResponse = await importEntitiesNextPage(entitiesResponse.nextPageKey);\n  entitiesList.push(...entitiesResponse.entities.map(i => i));\n    }\n \n  for (var key in entitiesList){\n    let zones = [];\n    \n    host = entitiesList[key]['displayName'];\n    monitoringmode = entitiesList[key]['properties']['monitoringMode'];\n    ostype = entitiesList[key]['properties']['osVersion'];\n    running_state = entitiesList[key]['properties']['state'];\n    installerversion = entitiesList[key]['properties']['installerVersion'];\n    for (var zone in entitiesList[key]['managementZones']){\n    zones.push(entitiesList[key]['managementZones'][zone]['name']);\n      }\n\n    \n    var myObj = {\n      mwname: mwnames[key],\n      name: host,\n      mode: monitoringmode,\n      os: ostype,\n      state: running_state,\n      version: installerversion,\n      managementZones: zones.join(', '),\n    }\n    jsonText.push(myObj);\n  }\n\nreturn jsonText;\n}","visualization":"raw","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"columnWidths":{},"lineWrapIds":[["managementZones"]],"enableLineWrap":true}}}},"layouts":{"0":{"x":0,"y":0,"w":23,"h":15},"1":{"x":0,"y":15,"w":23,"h":15}}}